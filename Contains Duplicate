//Brute force method , TC- O(N^2);

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        for(int i=0;i<nums.size();i++)
        {
            int count=0;
            for(int j=0;j<nums.size();j++)
            {
                if(nums[i]==nums[j])
                {
                    count++;
                }
            }
            if(count>=2)
               return true;
        }
        return false;
    }
};


//better (TC)-O(n log n)  , Space Complexity-O(n)  
class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        map<int,int> mpp;
        for(int i=0;i<nums.size();i++)
        {
            mpp[nums[i]]++;
        }
        for(auto it:mpp)
        {
            if(it.second>=2)
            {
                return true;
            }
        }
        return false;
    }
};

/*Set takes all distinct elements so if size of nums array>size of set then it means redundancy is there
TC- O(nlogn) SC-O(n)*/

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        set<int> st;
        for(int i=0;i<nums.size();i++)
        {
            st.insert(nums[i]);
        }
        if(nums.size()>st.size())
          return true;
    return false;
    }
};
